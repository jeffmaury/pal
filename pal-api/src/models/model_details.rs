/*
 * Podman Desktop AI Lab API
 *
 * API for interacting with the Podman Desktop AI Lab service.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ModelDetails : Details about a model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelDetails {
    #[serde(rename = "parent_model", skip_serializing_if = "Option::is_none")]
    pub parent_model: Option<String>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(rename = "family", skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,
    #[serde(rename = "families", skip_serializing_if = "Option::is_none")]
    pub families: Option<Vec<String>>,
    #[serde(rename = "parameter_size", skip_serializing_if = "Option::is_none")]
    pub parameter_size: Option<String>,
    #[serde(rename = "quantization_level", skip_serializing_if = "Option::is_none")]
    pub quantization_level: Option<String>,
}

impl ModelDetails {
    /// Details about a model
    pub fn new() -> ModelDetails {
        ModelDetails {
            parent_model: None,
            format: None,
            family: None,
            families: None,
            parameter_size: None,
            quantization_level: None,
        }
    }
}

